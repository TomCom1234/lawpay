<?php

/**
 *  This script attempts to make a payment using the details used in form submission for form 17
 *      and if successful, the form will submit as normal, if it isn't successful then it will display 
 *      the reason why to the user and not submit the form.  
 *
 */

add_action( 'gform_validation', function( $validation_result ) {
    $form = $validation_result['form'];

    // Return without changes if form id is not 17.
    if ( 17 != $form['id'] ) {
        return $validation_result;
    }

    //Get data to submit the charge from the form page
    $token_id = rgpost( 'input_23' );
    $bs_form_id = rgpost( 'form_id' );

    $cardNumber = rgpost( 'input_33' );
    $expMonth = rgpost( 'input_3' );
    $expYear = rgpost( 'input_6' );
    $cardCVV = rgpost( 'input_34' );

    $amount_raw = rgpost( 'input_18' );
    //$amount = $amount_raw * 100;
    $amount =  substr($amount_raw, 0, -2);
    $priceNoDollar = str_replace('$','',$amount);
    $price = str_replace('.','',$priceNoDollar);

    $client_first_name = rgpost( 'input_25_3' );
    $client_last_name = rgpost( 'input_25_6' );
    $client_full_name = $client_first_name . ' ' . $client_last_name;

    $address1 = rgpost( 'input_8_1' );
    $city = rgpost( 'input_8_3' );
    $state = rgpost( 'input_8_4' );
    $zip = rgpost( 'input_8_5' );

    
//Prepare package for making payment
$chargePackage = '{"amount": "'.$price.'",
    "auto_capture": false,
          "account_id": "'.LAWPAY_TEST_ACCOUNT.'",
          "method": {
              "type": "card",
              "number": "'.$cardNumber.'",
              "exp_month": '.$expMonth.',
              "exp_year": '.$expYear.',
              "cvv": "'.$cardCVV.'",
              "name": "'.$client_full_name.'",
              "address1": "'.$address1.'",
              "city": "'.$city.'",
              "state": "'.$state.'",
              "postal_code": "'.$zip.'"
          }
      }';

    /* ********************************************************
     * Submit Payment To Affinipay
     * ******************************************************** */
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'https://api.affinipay.com/v1/charges');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
    ]);
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_USERPWD, LAWPAY_TEST_SECRET_KEY);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $chargePackage);
    
    $response = curl_exec($ch);
    write_log("RESPONSE");
    write_log($response);
 curl_close($ch);
    $responseDecoded = json_decode($response, true);

    write_log($responseDecoded['id']);



//IF the payment was not sucessful
    if ( $responseDecoded['id'] == '' ) {
        write_log("PAYMENT TOKEN EMPTY");
    // Set the form validation to false.
        $validation_result['is_valid'] = false;

    //Get error code from payment curl response
        $errorCode = $responseDecoded['messages'][0]['code'];
        
//IF Card is expired, show message under card date fields
if($errorCode == 'card_expired')
        // Find Total field, set failed validation and message.
        foreach ( $form['fields'] as &$field ) {
            if ( $field->id == '3' ) {
                $field->failed_validation = true;
                $field->validation_message = 'Card is expired.';
            }
            if ( $field->id == '6' ) {
                $field->failed_validation = true;
                $field->validation_message = 'Card is expired.';
                break;
            }
        }
}
//IF Card number is invalid
if($errorCode == 'card_number_invalid'){
    // Find Total field, set failed validation and message.
    foreach ( $form['fields'] as &$field ) {
        if ( $field->id == '33' ) {
            $field->failed_validation = true;
            $field->validation_message = 'Card number is invalid.';
            break;
        }
    }
}
//IF Card has insufficient funds
if($errorCode == 'card_declined_insufficient_funds'){
    // Find Total field, set failed validation and message.
    foreach ( $form['fields'] as &$field ) {
        if ( $field->id == '33' ) {
            $field->failed_validation = true;
            $field->validation_message = 'Insufficient Funds.';
            break;
        }
    }
}
//IF CVV is incorrect 
if($errorCode == 'card_cvv_incorrect'){
    // Find Total field, set failed validation and message.
    foreach ( $form['fields'] as &$field ) {
        if ( $field->id == '34' ) {
            $field->failed_validation = true;
            $field->validation_message = 'CVV is incorrect.';
            break;
        }
    }
}
//IF card is declined
if($errorCode == 'card_declined'){
    // Find Total field, set failed validation and message.
    foreach ( $form['fields'] as &$field ) {
        if ( $field->id == '33' ) {
            $field->failed_validation = true;
            $field->validation_message = 'Card declined.';
            break;
        }
    }
}
        // Assign modified $form object back to the validation result.
        $validation_result['form'] = $form;
        return $validation_result;

});
